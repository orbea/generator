dnl Generator configure.in file - process with autoconf

  AC_INIT(cpu68k/def68k.c)
  AC_CANONICAL_SYSTEM
  AM_INIT_AUTOMAKE(generator, 0.33)
  AM_CONFIG_HEADER(config.h)
  optimum=yes

dnl See what version we're compiling

  AC_ARG_ENABLE(svgalib, [Create svgalib version], PROGRAM="generator-svgalib")
  AC_ARG_ENABLE(allegro, [Create allegro version], PROGRAM="generator-allegro")
  AC_ARG_ENABLE(tcltk, [Create tcltk version], PROGRAM="generator-tcltk")
  # AC_ARG_ENABLE(gtk, [Create gtk version], PROGRAM="generator-gtk")
  if [[ "x$PROGRAM" = "x" ]]; then
    AC_MSG_ERROR(You must select a user interface type: svgalib allegro tcltk)
  fi
  AC_SUBST(PROGRAM)
  if [[ "x$PROGRAM" = "xgenerator-allegro" ]]; then
    AC_DEFINE(ALLEGRO, 1, [Allegro version])
  fi
  AC_DEFINE(RAZE, 1, [Define for RAZE z80, undef for mz80])
  AC_DEFINE(DIRECTRAM, 1, [Define for direct ram writes (faster)])

dnl Check for processor.

  case $target_cpu in
    i?86)  AC_MSG_RESULT(Turning on x86 processor optimisations)
           AC_DEFINE(PROCESSOR_INTEL, 1, [Define if you have an x86 processor])
           ALIGNLONGS=1
           ;;
    sparc) AC_MSG_RESULT(Turning on sparc processor optimisations)
           AC_DEFINE(PROCESSOR_SPARC, 1, [Define if you have a sparc processor])
           ALIGNLONGS=0
           ;;
    arm)   AC_MSG_RESULT(Turning on arm processor optimisations)
           AC_DEFINE(PROCESSOR_ARM, 1, [Define if you have an ARM processor])
           ALIGNLONGS=1
           ;;
    *)     AC_MSG_WARN(Processor type not known - processor optimisations off!)
           ALIGNLONGS=1
           optimum=no
           ;;
  esac
  
  AC_DEFINE(ALIGNLONGS, ALIGNLONGS,
            [Undefine if your processor can read unaligned 32-bit values])

dnl Check for gcc options

  # default to gcc version 2
  GCCVER=2
  WARN=no
  DEBUG=no
  AC_ARG_WITH(warnings, [  --with-warnings         Turn on gcc warnings],
              WARN=$withval, WARN=no)
  AC_ARG_WITH(gcc, [  --with-gcc[=VER]    GCC optimisation setting],
              GCCVER=$withval)
  AC_ARG_WITH(debug, [  --with-debug        Turn debugging options on],
              DEBUG=$withval, DEBUG=no)
  if [[ "x$WARN" != "xno" ]]; then
    CFLAGS="$CFLAGS -W -Wall -Wstrict-prototypes -Wno-format -Wno-unused"
  fi
  if [[ "x$DEBUG" != "xno" ]]; then
    AC_MSG_RESULT(Turning on debug flags)
    CFLAGS="$CFLAGS -g -O"
    optimum=no
  else
    if [[ "x$GCCVER" != "xno" ]]; then
      AC_MSG_RESULT(Turning on gcc optimisations)
      CFLAGS="$CFLAGS -O3 -ffast-math -fomit-frame-pointer"
      if [[ "x$GCCVER" = "x3" ]]; then
        AC_MSG_RESULT(Turning on gcc 3 optimisations)
        CFLAGS="$CFLAGS -minline-all-stringops -fno-math-errno"
      fi
      case $target_cpu in
        i?86) AC_MSG_RESULT(Turning on pentium optimisations)
              CFLAGS="$CFLAGS -march=pentium -malign-double -malign-loops=5"
              CFLAGS="$CFLAGS -malign-jumps=5 -malign-functions=5"
              ;;
      esac
    else
      AC_MSG_WARN(You did not opt for gcc optimisations!)
      optimum=no
    fi
  fi

dnl Checks for programs.

  AC_PROG_CC
  AC_PROG_RANLIB
  AC_ISC_POSIX
  AC_PROG_INSTALL
  AC_TYPE_SIGNAL

dnl Checks for libraries.

dnl Checks for header files.

  AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.

  if [[ $cross_compiling = no ]]; then
    AC_C_BIGENDIAN
  else
    AC_WARN(Assuming little endian for cross compilation)
    # AC_DEFINE(WORDS_BIGENDIAN, 1)
  fi
  AC_C_CONST
  AC_C_INLINE
  AC_CHECK_SIZEOF(unsigned char, 1)
  AC_CHECK_SIZEOF(unsigned short, 2)
  AC_CHECK_SIZEOF(unsigned int, 4)
  AC_CHECK_SIZEOF(unsigned long, 4)
  AC_CHECK_SIZEOF(unsigned long long, 8)
  AC_CHECK_FUNCS(snprintf)
  AC_CHECK_HEADERS(tcl8.0.h)
  AC_CHECK_HEADERS(tk8.0.h)

dnl Makefile substitutions

dnl Final stuff

  AC_OUTPUT([Makefile cpu68k/Makefile raze/Makefile ym2612/Makefile
             main/Makefile sn76496/Makefile])

  if [[ $optimum = no ]]; then
    echo '!!! Generator was compiled non-optimally, see warnings above !!!' 1>&2
  fi

dnl Moooo.
